// GoBalloon
// compressed.go - Functions for created and decoding compressed APRS position reports
//
// (c) 2014, Christopher Snell

package aprs

import (
	"bytes"
	"github.com/chrissnell/GoBalloon/geospatial"
)

func CreateCompressedPosition(p *geospatial.Point, symTable, symCode rune) string {
	var buffer bytes.Buffer

	// First byte in our compressed position report is the data type indicator.
	// The rune '!' indicates a real-time compressed position report
	buffer.WriteRune('!')

	// Next byte is the symbol table selector
	buffer.WriteRune(symTable)

	// Next four bytes is the decimal latitude, compressed with funky Base91
	buffer.WriteString(string(EncodeBase91Position(int(LatPrecompress(p.Lat)))))

	// Then comes the longitude, same compression
	buffer.WriteString(string(EncodeBase91Position(int(LonPrecompress(p.Lon)))))

	// Then our symbol code
	buffer.WriteRune(symCode)

	// Then we compress our altitude with a funky logrithm and conver to Base91
	buffer.Write(AltitudeCompress(p.Alt))

	// This last byte specifies: a live GPS fix, in GGA NMEA format, with the
	// compressed position generated by software (this program!).  See APRS
	// Protocol Reference v1.0, page 39, for more details on this wack shit.
	buffer.WriteByte(byte(0x32) + 33)

	return buffer.String()
}
